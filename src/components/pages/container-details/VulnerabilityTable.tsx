import React, { useState } from 'react'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Plus, X, ChevronUp, ChevronDown } from 'lucide-react'
import { Vulnerability, VulnerabilityDetails } from '@/types/api'
import { formatVulnerabilityDate, getSeverityBgColor, formatSeverityWithScore } from '@/lib/utils/formatters'
import { fetchVulnerabilityDetails } from '@/lib/api/containers'

interface VulnerabilityTableProps {
	vulnerabilities: Vulnerability[]
}

export default function VulnerabilityTable({ vulnerabilities }: VulnerabilityTableProps) {
	const [expandedCve, setExpandedCve] = useState<string | null>(null)
	const [vulnerabilityDetails, setVulnerabilityDetails] = useState<Record<string, VulnerabilityDetails>>({})
	const [loadingDetails, setLoadingDetails] = useState<Record<string, boolean>>({})
	const [referencesExpanded, setReferencesExpanded] = useState<Record<string, boolean>>({})

	const handleRowClick = async (vulnerability: Vulnerability) => {
		const cveId = vulnerability.cve_id
		
		if (expandedCve === cveId) {
			setExpandedCve(null)
		} else {
			setExpandedCve(cveId)
			
			// Fetch details if not already loaded
			if (!vulnerabilityDetails[cveId] && !loadingDetails[cveId]) {
				setLoadingDetails(prev => ({ ...prev, [cveId]: true }))
				try {
					const details = await fetchVulnerabilityDetails(
						vulnerability.package_slug,
						vulnerability.version_slug,
						vulnerability.cve_slug
					)
					setVulnerabilityDetails(prev => ({ ...prev, [cveId]: details }))
				} catch (error) {
					console.error('Failed to fetch vulnerability details:', error)
				} finally {
					setLoadingDetails(prev => ({ ...prev, [cveId]: false }))
				}
			}
		}
	}

	const toggleReferences = (cveId: string) => {
		setReferencesExpanded(prev => ({
			...prev,
			[cveId]: !prev[cveId]
		}))
	}

	return (
		<div className="bg-white">
			<Table>
				<TableHeader>
					<TableRow>
						<TableHead className="font-content border-b" >CVE ID</TableHead>
						<TableHead className="font-content border-b">
							<div className="flex items-center gap-2">
								Severity
								<ChevronDown className="h-4 w-4 text-muted-foreground" />
							</div>
						</TableHead>
						<TableHead className="hidden md:table-cell font-content border-b" >Package</TableHead>
						<TableHead className="hidden md:table-cell font-content border-b" >Fixed Package</TableHead>
						<TableHead className="hidden md:table-cell font-content border-b" >Version</TableHead>
						<TableHead className="font-content border-b">Last detected</TableHead>
					</TableRow>
				</TableHeader>
				<TableBody>
					{/* Spacer row after header */}
					<TableRow className="border-0 h-3">
						<TableCell colSpan={6} className="p-0 border-0" />
					</TableRow>
					{vulnerabilities.map((vulnerability, index) => {
						const isExpanded = expandedCve === vulnerability.cve_id
						const details = vulnerabilityDetails[vulnerability.cve_id]
						const isLoading = loadingDetails[vulnerability.cve_id]
						const isReferencesExpanded = referencesExpanded[vulnerability.cve_id] ?? true
						const prevVuln = index > 0 ? vulnerabilities[index - 1] : null
						const prevExpanded = prevVuln ? expandedCve === prevVuln.cve_id : false
						
						return (
							<React.Fragment key={`${vulnerability.cve_id}-${index}`}>
								{/* Spacer row for gap between rows */}
								{index > 0 && !prevExpanded && (
									<TableRow className="border-0 h-3">
										<TableCell colSpan={6} className="p-0 border-0" />
									</TableRow>
								)}
								
								{isExpanded ? (
									// Expanded row: wrap in bordered container
									<>
										<TableRow>
											<TableCell colSpan={6} className="p-0 border-0">
												<div
													className="rounded border-2"
													style={{ borderColor: '#1CE8AB' }}
												>
													{/* Header Row */}
													<Table>
														<TableBody>
															<TableRow
																className="hover:bg-muted/50 cursor-pointer bg-white border-0"
																onClick={() => handleRowClick(vulnerability)}
															>
																<TableCell className="rounded-tl rounded-bl border-l" style={{ borderWidth: '1px', borderColor: 'transparent', borderRight: '0px' }}>
																	<div className="flex items-center space-x-2">
																		<X className="md:h-[1.5rem] md:w-[1.5rem] h-8 w-8 text-gray-500" />
																		<span className="font-mono text-sm font-medium font-content">
																			{vulnerability.cve_id}
																		</span>
																	</div>
																</TableCell>
																<TableCell className="border-r" style={{ borderWidth: '1px', borderColor: 'transparent' }}>
																	<div
																		className="rounded-md px-2 py-1 text-sm font-medium text-white font-content inline-block"
																		style={{ backgroundColor: getSeverityBgColor(vulnerability.severity) }}
																	>
																		{formatSeverityWithScore(vulnerability.severity, vulnerability.severity_score)}
																	</div>
																</TableCell>
																<TableCell className="hidden md:table-cell border-r" style={{ borderWidth: '1px', borderColor: 'transparent' }}>
																	<div className="font-medium font-content">{vulnerability.package}</div>
																</TableCell>
																<TableCell className="hidden md:table-cell border-r" style={{ borderWidth: '1px', borderColor: 'transparent' }}>
																	{vulnerability.fixed_in_version ? (
																		<div className="font-mono text-sm font-content">{vulnerability.fixed_in_version}</div>
																	) : (
																		<span className="text-muted-foreground font-content">-</span>
																	)}
																</TableCell>
																<TableCell className="hidden md:table-cell border-r" style={{ borderWidth: '1px', borderColor: 'transparent' }}>
																	<div className="font-mono text-sm font-content">{vulnerability.version}</div>
																</TableCell>
																<TableCell className="rounded-tr rounded-br border-r" style={{ borderWidth: '1px', borderColor: 'transparent' }}>
																	<div className="text-sm text-muted-foreground font-content">
																		{formatVulnerabilityDate(vulnerability.last_detected)}
																	</div>
																</TableCell>
															</TableRow>
														</TableBody>
													</Table>
													
													{/* Divider */}
													<div className="border-t border-gray-200" />
													
													{/* Detail Section */}
													<div className="p-6 space-y-4">
														{/* Description */}
														<div>
															<h3 className="font-semibold mb-2 text-sm font-content">Description</h3>
															{isLoading ? (
																<div className="text-sm text-muted-foreground font-content">Loading description...</div>
															) : details ? (
																<p className="text-sm text-muted-foreground leading-relaxed font-content">
																	{details.description}
																</p>
															) : (
																<p className="text-sm text-muted-foreground leading-relaxed font-content">
																	No description available.
																</p>
															)}
														</div>
														
														{/* References */}
														{details && details.references && details.references.length > 0 && (
															<div>
																<button
																	onClick={(e) => {
																		e.stopPropagation()
																		toggleReferences(vulnerability.cve_id)
																	}}
																	className="flex items-center gap-2 mb-2 font-semibold text-sm font-content hover:text-foreground"
																>
																	References
																	<ChevronUp
																		className={`h-4 w-4 transition-transform ${isReferencesExpanded ? 'rotate-0' : 'rotate-180'}`}
																	/>
																</button>
																{isReferencesExpanded && (
																	<ul className="space-y-1 ml-4">
																		{details.references.map((reference, refIndex) => (
																			<li key={refIndex} className="list-disc">
																				<a
																					href={reference}
																					target="_blank"
																					rel="noopener noreferrer"
																					className="text-blue-600 hover:underline text-sm font-content"
																					onClick={(e) => e.stopPropagation()}
																				>
																					{reference}
																				</a>
																			</li>
																		))}
																	</ul>
																)}
															</div>
														)}
													</div>
												</div>
											</TableCell>
										</TableRow>
										{/* Spacer row after expanded row */}
										<TableRow className="border-0 h-3">
											<TableCell colSpan={6} className="p-0 border-0" />
										</TableRow>
									</>
								) : (
									// Collapsed row
									<TableRow
										className="hover:bg-muted/50 cursor-pointer"
										onClick={() => handleRowClick(vulnerability)}
									>
										<TableCell className="rounded-tl rounded-bl border-l border-b border-r" style={{ borderWidth: '1px', borderRight: 'none' }}>
											<div className="flex items-center space-x-2">
												<Plus className="md:h-8 md:w-8 h-8 w-8" style={{ color: '#1CE8AB' }} />
												<span className="font-mono text-sm font-medium font-content">
													{vulnerability.cve_id}
												</span>
											</div>
										</TableCell>
										<TableCell className="border-b border-r" style={{ borderWidth: '1px',borderRight: 'none' ,borderLeft: 'none'  }}>
											<div
												className="rounded-md px-2 py-1 md:text-sm text-xs font-medium text-black font-content inline-block"
												style={{ backgroundColor: getSeverityBgColor(vulnerability.severity) }}
											>
												{formatSeverityWithScore(vulnerability.severity, vulnerability.severity_score)}
											</div>
										</TableCell>
										<TableCell className="hidden md:table-cell border-b border-r" style={{ borderWidth: '1px',borderRight: 'none' ,borderLeft: 'none' }}>
											<div className="font-medium font-content">{vulnerability.package}</div>
										</TableCell>
										<TableCell className="hidden md:table-cell border-b border-r" style={{ borderWidth: '1px',borderRight: 'none' ,borderLeft: 'none' }}>
											{vulnerability.fixed_in_version ? (
												<div className="font-mono text-sm font-content">{vulnerability.fixed_in_version}</div>
											) : (
												<span className="text-muted-foreground font-content">-</span>
											)}
										</TableCell>
										<TableCell className="hidden md:table-cell border-b border-r" style={{ borderWidth: '1px',borderRight: 'none' ,borderLeft: 'none' }}>
											<div className="font-mono text-sm font-content">{vulnerability.version}</div>
										</TableCell>
										<TableCell className="rounded-tr rounded-br border-b border-r" style={{ borderWidth: '1px' ,borderLeft: 'none' }}>
											<div className="text-sm text-muted-foreground font-content">
												{formatVulnerabilityDate(vulnerability.last_detected)}
											</div>
										</TableCell>
									</TableRow>
								)}
							</React.Fragment>
						)
					})}
				</TableBody>
			</Table>
		</div>
	)
}