import { useState } from 'react'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { ExternalLink, AlertTriangle, Loader2 } from 'lucide-react'
import { Vulnerability, VulnerabilityDetails } from '@/types/api'
import { formatRelativeTime, getSeverityColor, formatCVSSScore, getCVSSColor } from '@/lib/utils/formatters'
import { fetchVulnerabilityDetails } from '@/lib/api/containers'

interface VulnerabilityTableProps {
	vulnerabilities: Vulnerability[]
}

export default function VulnerabilityTable({ vulnerabilities }: VulnerabilityTableProps) {
	const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null)
	const [vulnerabilityDetails, setVulnerabilityDetails] = useState<VulnerabilityDetails | null>(null)
	const [loadingDetails, setLoadingDetails] = useState(false)
	const [detailsError, setDetailsError] = useState<string | null>(null)

	const handleVulnerabilityClick = async (vulnerability: Vulnerability) => {
		setSelectedVulnerability(vulnerability)
		setLoadingDetails(true)
		setDetailsError(null)
		setVulnerabilityDetails(null)

		try {
			const details = await fetchVulnerabilityDetails(
				vulnerability.package_slug,
				vulnerability.version_slug,
				vulnerability.cve_slug
			)
			setVulnerabilityDetails(details)
		} catch (error) {
			setDetailsError(error instanceof Error ? error.message : 'Failed to fetch vulnerability details')
		} finally {
			setLoadingDetails(false)
		}
	}

	return (
		<>
			<div className="rounded-md border">
				<Table>
					<TableHeader>
						<TableRow>
							<TableHead>CVE ID</TableHead>
							<TableHead>Severity</TableHead>
							<TableHead>Package</TableHead>
							<TableHead>Version</TableHead>
							<TableHead>Fixed In</TableHead>
							<TableHead>Last Detected</TableHead>
							<TableHead>Actions</TableHead>
						</TableRow>
					</TableHeader>
					<TableBody>
						{vulnerabilities.map((vulnerability, index) => (
							<TableRow key={index} className="hover:bg-muted/50">
								<TableCell>
									<div className="flex items-center space-x-2">
										<AlertTriangle className="h-4 w-4 text-destructive" />
										<span className="font-mono text-sm font-medium">
											{vulnerability.cve_id}
										</span>
									</div>
								</TableCell>
								<TableCell>
									<Badge 
										variant="outline" 
										className={getSeverityColor(vulnerability.severity)}
									>
										{vulnerability.severity}
									</Badge>
									{vulnerability.severity_score > 0 && (
										<div className={`text-xs mt-1 ${getCVSSColor(vulnerability.severity_score)}`}>
											CVSS: {formatCVSSScore(vulnerability.severity_score)}
										</div>
									)}
								</TableCell>
								<TableCell>
									<div className="font-medium">{vulnerability.package}</div>
								</TableCell>
								<TableCell>
									<div className="font-mono text-sm">{vulnerability.version}</div>
								</TableCell>
								<TableCell>
									{vulnerability.fixed_in_version ? (
										<div className="font-mono text-sm text-green-600">
											{vulnerability.fixed_in_version}
										</div>
									) : (
										<span className="text-muted-foreground">Not available</span>
									)}
								</TableCell>
								<TableCell>
									<div className="text-sm">
										{formatRelativeTime(vulnerability.last_detected)}
									</div>
								</TableCell>
								<TableCell>
									<Button
										variant="ghost"
										size="sm"
										onClick={() => handleVulnerabilityClick(vulnerability)}
									>
										<ExternalLink className="h-4 w-4" />
									</Button>
								</TableCell>
							</TableRow>
						))}
					</TableBody>
				</Table>
			</div>

			{/* Vulnerability Details Modal */}
			{selectedVulnerability && (
				<div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
					<div className="bg-background rounded-lg max-w-4xl w-full max-h-[80vh] overflow-y-auto">
						<div className="p-6">
							<div className="flex items-center justify-between mb-4">
								<h3 className="text-lg font-semibold">
									{selectedVulnerability.cve_id}
								</h3>
								<Button
									variant="ghost"
									size="sm"
									onClick={() => {
										setSelectedVulnerability(null)
										setVulnerabilityDetails(null)
										setDetailsError(null)
									}}
								>
									Ã—
								</Button>
							</div>
							
							<div className="space-y-4">
								<div className="grid grid-cols-2 gap-4">
									<div>
										<label className="text-sm font-medium text-muted-foreground">Severity</label>
										<div className="mt-1">
											<Badge 
												variant="outline" 
												className={getSeverityColor(selectedVulnerability.severity)}
											>
												{selectedVulnerability.severity}
											</Badge>
											{selectedVulnerability.severity_score > 0 && (
												<div className={`text-sm mt-1 ${getCVSSColor(selectedVulnerability.severity_score)}`}>
													CVSS Score: {formatCVSSScore(selectedVulnerability.severity_score)}
												</div>
											)}
										</div>
									</div>
									<div>
										<label className="text-sm font-medium text-muted-foreground">Package</label>
										<div className="mt-1 font-medium">{selectedVulnerability.package}</div>
									</div>
									<div>
										<label className="text-sm font-medium text-muted-foreground">Version</label>
										<div className="mt-1 font-mono text-sm">{selectedVulnerability.version}</div>
									</div>
									<div>
										<label className="text-sm font-medium text-muted-foreground">Fixed In</label>
										<div className="mt-1">
											{selectedVulnerability.fixed_in_version ? (
												<span className="font-mono text-sm text-green-600">
													{selectedVulnerability.fixed_in_version}
												</span>
											) : (
												<span className="text-muted-foreground">Not available</span>
											)}
										</div>
									</div>
								</div>
								
								<div>
									<label className="text-sm font-medium text-muted-foreground">Last Detected</label>
									<div className="mt-1 text-sm">
										{formatRelativeTime(selectedVulnerability.last_detected)}
									</div>
								</div>

								{/* Vulnerability Details Section */}
								{loadingDetails && (
									<div className="flex items-center justify-center py-8">
										<Loader2 className="h-6 w-6 animate-spin mr-2" />
										<span className="text-muted-foreground">Loading vulnerability details...</span>
									</div>
								)}

								{detailsError && (
									<div className="p-4 bg-destructive/10 border border-destructive/20 rounded-lg">
										<p className="text-destructive text-sm">{detailsError}</p>
									</div>
								)}

								{vulnerabilityDetails && (
									<div className="space-y-4">
										<div>
											<label className="text-sm font-medium text-muted-foreground">Description</label>
											<div className="mt-2 p-4 bg-muted/50 rounded-lg">
												<p className="text-sm whitespace-pre-wrap">{vulnerabilityDetails.description}</p>
											</div>
										</div>

										{vulnerabilityDetails.references && vulnerabilityDetails.references.length > 0 && (
											<div>
												<label className="text-sm font-medium text-muted-foreground">References</label>
												<div className="mt-2 space-y-2">
													{vulnerabilityDetails.references.map((reference, index) => (
														<div key={index} className="flex items-center space-x-2">
															<ExternalLink className="h-4 w-4 text-muted-foreground flex-shrink-0" />
															<a
																href={reference}
																target="_blank"
																rel="noopener noreferrer"
																className="text-sm text-blue-600 hover:text-blue-800 hover:underline break-all"
															>
																{reference}
															</a>
														</div>
													))}
												</div>
											</div>
										)}
									</div>
								)}
								
								<div className="pt-4 border-t flex space-x-2">
									<Button
										variant="outline"
										size="sm"
										onClick={() => window.open(`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${selectedVulnerability.cve_id}`, '_blank')}
									>
										<ExternalLink className="h-4 w-4 mr-2" />
										View CVE Details
									</Button>
								</div>
							</div>
						</div>
					</div>
				</div>
			)}
		</>
	)
}
